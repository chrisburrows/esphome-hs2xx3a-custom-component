substitutions:
  device_name: mmwave
  mmwave_prefix: ""
  mmwave_suffix: ""
  ## FIXME: To be removed later. Would cause a breaking change.
  uart_tx_pin: GPIO19
  uart_rx_pin: GPIO18
  ##
  gpio_pin: GPIO23
  header_file: leapmmw_sensor.h

esphome:
  name: "${device_name}"
  includes:
    - ${header_file}

logger:
  logs:
    sensor: INFO # reduced logging to minimize web_server target overload..
    script: ERROR

## FIXME: To be removed later. Would cause a breaking change
uart:
  id: uart_bus
  tx_pin: ${uart_tx_pin}
  rx_pin: ${uart_rx_pin}
  baud_rate: 115200
##

binary_sensor:
  - platform: gpio
    name: "${mmwave_prefix}mmWave Presence Detection${mmwave_suffix}"
    id: mmwave_presence_detection
    device_class: motion
    pin:
      number: ${gpio_pin}
      mode: INPUT_PULLDOWN
    on_state:
      - if:
          condition:
            binary_sensor.is_off: mmwave_presence_detection
          then:
            - sensor.template.publish:
                id: mmwave_num_targets
                state: 0
            - lambda: |-
                return clearTargets();
    
sensor:      
  - platform: template
    name: "${mmwave_prefix}Target 1 Distance m${mmwave_suffix}"
    id: mmwave_target_1_distance_m # do not change
    internal: true
    
  - platform: template
    name: "${mmwave_prefix}Target 2 Distance m${mmwave_suffix}"
    id: mmwave_target_2_distance_m # do not change
    internal: true
    
  - platform: template
    name: "${mmwave_prefix}Target 3 Distance m${mmwave_suffix}"
    id: mmwave_target_3_distance_m # do not change
    internal: true
    
  - platform: template
    name: "${mmwave_prefix}Target 4 Distance m${mmwave_suffix}"
    id: mmwave_target_4_distance_m # do not change
    internal: true
    
  - platform: template
    name: "${mmwave_prefix}Target 1 SNR${mmwave_suffix}"
    id: mmwave_target_1_SNR # do not change
    internal: true

  - platform: template
    name: "${mmwave_prefix}Target 2 SNR${mmwave_suffix}"
    id: mmwave_target_2_SNR # do not change
    internal: true
    
  - platform: template
    name: "${mmwave_prefix}Target 3 SNR${mmwave_suffix}"
    id: mmwave_target_3_SNR # do not change
    internal: true
    
  - platform: template
    name: "${mmwave_prefix}Target 4 SNR${mmwave_suffix}"
    id: mmwave_target_4_SNR # do not change
    internal: true

  - platform: template
    name: "${mmwave_prefix}Num Targets${mmwave_suffix}"
    id: mmwave_num_targets # do not change
    accuracy_decimals: 0

  - platform: custom
    lambda: |-
      auto s = new leapmmw(id(uart_bus));
      App.register_component(s);
      return {};
    sensors:
      
switch:
  - platform: safe_mode
    name: "${mmwave_prefix}Use Safe mode${mmwave_suffix}"

  - platform: template
    name: "${mmwave_prefix}Show Target Stats${mmwave_suffix}"
    id: mmwave_show_target_stats
    optimistic: true
    internal: true
    on_turn_off:
      - lambda: 'return clearTargets();'

  - platform: template
    name: "${mmwave_prefix}mmWave Sensor${mmwave_suffix}"
    id: mmwave_sensor # do not change
    entity_category: config
    optimistic: true
    turn_on_action:
      then:
        - script.execute: turn_on_mmwave_sensor
    turn_off_action:
      then:
        - script.execute: turn_off_mmwave_sensor

  - platform: template
    name: "${mmwave_prefix}LED${mmwave_suffix}"
    id: mmwave_led  # do not change
    entity_category: config
    optimistic: true
    turn_on_action:
      then:
        - if:
            condition:
              or:
                - script.is_running: mmwave_turn_on_led
                - script.is_running: mmwave_turn_off_led
                - script.is_running: mmwave_set_distance
                - script.is_running: mmwave_set_latency
                - script.is_running: mmwave_set_sensitivity
            then:
              - script.wait: mmwave_turn_on_led
              - script.wait: mmwave_turn_off_led
              - script.wait: mmwave_set_distance
              - script.wait: mmwave_set_latency
              - script.wait: mmwave_set_sensitivity
              - delay: 100ms
              - script.execute: mmwave_turn_on_led
            else:
              - delay: 100ms
              - script.execute: mmwave_turn_on_led
    turn_off_action:
      then:
        - if:
            condition:
              or:
                - script.is_running: mmwave_turn_on_led
                - script.is_running: mmwave_turn_off_led
                - script.is_running: mmwave_set_distance
                - script.is_running: mmwave_set_latency
                - script.is_running: mmwave_set_sensitivity
            then:
              - script.wait: mmwave_turn_on_led
              - script.wait: mmwave_turn_off_led
              - script.wait: mmwave_set_distance
              - script.wait: mmwave_set_latency
              - script.wait: mmwave_set_sensitivity
              - delay: 100ms
              - script.execute: mmwave_turn_off_led
            else:
              - delay: 100ms
              - script.execute: mmwave_turn_off_led

number:
  - platform: template
    name: "${mmwave_prefix}Distance${mmwave_suffix}"
    id: mmwave_distance # do not change
    entity_category: config
    min_value: 0.15
    max_value: 9.45
    step: 0.15
    unit_of_measurement: M
    mode: box
    lambda: |-
      leapmmw(id(uart_bus)).getmmwConf("getRange");
      return {};
    set_action:
      then:
        - globals.set:
            id: mmwave_distance_global
            value: !lambda 'return x;'
        - if:
            condition:
              or:
                - script.is_running: mmwave_turn_on_led
                - script.is_running: mmwave_turn_off_led
                - script.is_running: mmwave_set_distance
                - script.is_running: mmwave_set_latency
                - script.is_running: mmwave_set_sensitivity
            then:
              - script.wait: mmwave_turn_on_led
              - script.wait: mmwave_turn_off_led
              - script.wait: mmwave_set_distance
              - script.wait: mmwave_set_latency
              - script.wait: mmwave_set_sensitivity
              - delay: 75ms
              - script.execute: mmwave_set_distance
            else:
              - delay: 75ms
              - script.execute: mmwave_set_distance 
      
  - platform: template
    name: "${mmwave_prefix}Latency${mmwave_suffix}"
    id: mmwave_latency # do not change
    entity_category: config
    min_value: 1
    max_value: 600
    lambda: |-
      leapmmw(id(uart_bus)).getmmwConf("getLatency");
      return {};
    step: 1
    unit_of_measurement: s
    mode: box
    set_action:
      then:
        - globals.set:
            id: mmwave_latency_global
            value: !lambda 'return x;'
        - if:
            condition:
              or:
                - script.is_running: mmwave_turn_on_led
                - script.is_running: mmwave_turn_off_led
                - script.is_running: mmwave_set_distance
                - script.is_running: mmwave_set_latency
                - script.is_running: mmwave_set_sensitivity
            then:
              - script.wait: mmwave_turn_on_led
              - script.wait: mmwave_turn_off_led
              - script.wait: mmwave_set_distance
              - script.wait: mmwave_set_latency
              - script.wait: mmwave_set_sensitivity
              - delay: 50ms
              - script.execute: mmwave_set_latency
            else:
              - delay: 50ms
              - script.execute: mmwave_set_latency

  - platform: template
    name: "${mmwave_prefix}Sensitivity${mmwave_suffix}"
    id: mmwave_sensitivity # do not change
    entity_category: config
    min_value: 0
    max_value: 9
    lambda: |-
      leapmmw(id(uart_bus)).getmmwConf("getSensitivity");
      return {};
    step: 1
    set_action:
      then:
        - globals.set:
            id: mmwave_sensitivity_global
            value: !lambda 'return x;'
        - if:
            condition:
              or:
                - script.is_running: mmwave_turn_on_led
                - script.is_running: mmwave_turn_off_led
                - script.is_running: mmwave_set_distance
                - script.is_running: mmwave_set_latency
                - script.is_running: mmwave_set_sensitivity
            then:
              - script.wait: mmwave_turn_on_led
              - script.wait: mmwave_turn_off_led
              - script.wait: mmwave_set_distance
              - script.wait: mmwave_set_latency
              - script.wait: mmwave_set_sensitivity
              - delay: 25ms
              - script.execute: mmwave_set_sensitivity
            else:
              - delay: 25ms
              - script.execute: mmwave_set_sensitivity

button:
  - platform: restart
    name: "Restart ESP ${device_name}"
    entity_category: diagnostic
    on_press:
      - uart.write:
          id: uart_bus
          data: "resetSystem 0"

  - platform: template
    name: "Factory Reset mmwMCU ${device_name}"
    id: factory_reset_mmwMCU
    entity_category: diagnostic
    on_press:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: "resetCfg"
      - delay: 3s
      - switch.turn_on: mmwave_sensor

globals:
  - id: mmwave_distance_global
    type: float
  - id: mmwave_latency_global
    type: float
  - id: mmwave_sensitivity_global
    type: int

script:
  - id: turn_on_mmwave_sensor
    then:
      - uart.write: "setUartOutput 1 0"
      - delay: 1s
      - uart.write: "setUartOutput 2 1 1 2"
      - delay: 1s
      - uart.write: "saveConfig"
      - delay: 3s 
      - uart.write: "sensorStart"

  - id: turn_off_mmwave_sensor
    then:
      - uart.write: "sensorStop"

  - id: mmwave_turn_on_led
    then:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: "setLedMode 1 0"
      - delay: 1s
      - lambda: |-
          leapmmw(id(uart_bus)).getmmwConf("getLedMode 1");
      - delay: 1s 
      - switch.turn_on: mmwave_sensor
      - delay: 6s # the sum of mmwave_sensor delays
    
  - id: mmwave_turn_off_led
    then:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: "setLedMode 1 1"
      - delay: 1s
      - lambda: |-
          leapmmw(id(uart_bus)).getmmwConf("getLedMode 1");
      - delay: 1s
      - switch.turn_on: mmwave_sensor
      - delay: 6s # the sum of mmwave_sensor delays

  - id: mmwave_set_distance
    mode: queued
    then:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: !lambda
          std::string range = "setRange 0 " + str_sprintf("%.2f", id(mmwave_distance_global));
          return std::vector<unsigned char>(range.begin(), range.end());
      - delay: 1s
      - switch.turn_on: mmwave_sensor
      - delay: 6s # the sum of mmwave_sensor delays

  - id: mmwave_set_latency
    mode: queued
    then:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: !lambda
          std::string setL = "setLatency 0.1 " + str_sprintf("%.0f", id(mmwave_latency_global));
          return std::vector<unsigned char>(setL.begin(), setL.end());
      - delay: 1s
      - switch.turn_on: mmwave_sensor
      - delay: 6s # the sum of mmwave_sensor delays

  - id: mmwave_set_sensitivity
    mode: queued
    then:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: !lambda#include "esphome.h"
#include <string>
#include "esphome/core/helpers.h"

#define PUBLISH_NUMBER(sensor, valueString) (id(sensor).publish_state(parse_number<float>(valueString).value()))
#define PUBLISH_SWITCH(sensor, onOff) (id(sensor).publish_state(onOff))

void publishTarget(int idx, float dist, float snr) {
  switch(idx) {
    case 1:
      id(mmwave_target_1_distance_m).publish_state(dist);
      id(mmwave_target_1_SNR).publish_state(snr);
      break;

    case 2:
      id(mmwave_target_2_distance_m).publish_state(dist);
      id(mmwave_target_2_SNR).publish_state(snr);
      break;

    case 3:
      id(mmwave_target_3_distance_m).publish_state(dist);
      id(mmwave_target_3_SNR).publish_state(snr);
      break;

    case 4:
      id(mmwave_target_4_distance_m).publish_state(dist);
      id(mmwave_target_4_SNR).publish_state(snr);
      break;

    case 5:
    case 6:
    case 7:
    case 8:
      break;
    default:
      ESP_LOGD("custom", "Invalid target sensor number: %d", idx);
      break;
  }
};

static void clearTargets () {
  for(int i = 1 ; i < 9; i++) publishTarget(i, 0.0, 0.0);
}

class leapmmw : public Component, public UARTDevice {

 public:
  leapmmw(UARTComponent *parent) : UARTDevice(parent) {}
  
  void setup() override {
    //
  }

  void getmmwConf(std::string mmwparam) {
    mmwparam = mmwparam + "\r";
    write_array(std::vector<unsigned char>(mmwparam.begin(), mmwparam.end()));
  }

  int readline(int readch, char *buffer, int len)
  {
    static int pos = 0;
    int rpos;

    if (readch > 0) {
      switch (readch) {
        case '\n': // Ignore new-lines
          break;
        case '\r': // Return on CR
          rpos = pos;
          pos = 0;  // Reset position index ready for next time
          return rpos;
        default:
          if (pos < len-1) {
            buffer[pos++] = readch;
            buffer[pos] = 0;
          }
      }
    }
    // No end of line has been found, so return -1.
    return -1;
  }
  std::string getline;

  void loop() override {
    const int max_line_length = 40;
    static char buffer[max_line_length];

    while (available()) {
      if (id(mmwave_sensor).state == 0 && id(mmwave_num_targets).state > 0) {
        id(mmwave_num_targets).publish_state(0);
        clearTargets();
      }
      if(readline(read(), buffer, max_line_length) >= 4) {
        std::string line = buffer;

        if (line.substr(0, 18) == "leapMMW:/>$JYBSS,0" && id(mmwave_num_targets).state > 0) {
          id(mmwave_num_targets).publish_state(0);
          clearTargets();
        }
        if (line.substr(0, 6) == "$JYRPO") {
          std::string vline = line.substr(6);
          std::vector<std::string> v;    
          for(int i = 0; i < vline.length(); i++) {
              if(vline[i] == ',') {
                  v.push_back("");
              } else {
                  v.back() += vline[i];
              }
          }
          id(mmwave_num_targets).publish_state(parse_number<float>(v[0]).value());
          if (id(show_target_stats).state == 1) {
            publishTarget(stoi(v[1]), parse_number<float>(v[2]).value(), parse_number<float>(v[4]).value());
            // zero null targets
            for(int i = parse_number<int>(v[0]).value() +1 ; i < 9; i++) publishTarget(i, 0.0, 0.0);
          }
        }
        if (line.substr(0, 6) == "$JYRPO" && id(mmwave_sensor).state == 0) {
          PUBLISH_SWITCH(mmwave_sensor, 1);
        }

        // compare last line
        if (line.substr(0, 8) == "Response") {
          // ESP_LOGD("custom", "Found Response - line is: %s", line.c_str());
          // ESP_LOGD("custom", "Found Response - lastline is: %s", getline.c_str());

          // leapMMW:/>getSensitivity
          if (getline.substr(0, 24) == "leapMMW:/>getSensitivity" || getline.substr(0, 14) == "getSensitivity") {
            std::string getSensitivity = line.substr(9, 1);
            if (getSensitivity.empty()) {
              ESP_LOGD("custom", "Did not find a value for getSensitivity");
            } else {
              // ESP_LOGD("custom", "The value of getSensitivity is: %f", parse_number<float>(getSensitivity).value());
              PUBLISH_NUMBER(mmwave_sensitivity, getSensitivity);
            }
          }

          // leapMMW:/>getRange
          if (getline.substr(0, 18) == "leapMMW:/>getRange" || getline.substr(0, 8) == "getRange") {
            std::string getRange = line.substr(15, 4);
            if (getRange.empty()) {
              ESP_LOGD("custom", "Did not find a value for getRange");
            } else {
              // ESP_LOGD("custom", "The value of getRange is: %f", parse_number<float>(getRange).value());
              PUBLISH_NUMBER(mmwave_distance, getRange);
            }
          }

          // leapMMW:/>getLatency
          if (getline.substr(0, 20) == "leapMMW:/>getLatency" || getline.substr(0, 10) == "getLatency") {
            std::string getLatency = line.substr(15, 2);
            if (getLatency.empty()) {
              ESP_LOGD("custom", "Did not find a value for getLatency");
            } else {
              // ESP_LOGD("custom", "The value of getLatency is: %f", parse_number<float>(getLatency).value());
              PUBLISH_NUMBER(mmwave_latency, getLatency);
            }
          }

          // leapMMW:/>getLedMode
          if (getline.substr(0, 20) == "leapMMW:/>getLedMode" || getline.substr(0, 10) == "getLedMode") {
            std::string getLedMode = line.substr(11, 1);
            if (getLedMode.empty()) {
              ESP_LOGD("custom", "Did not find a value for getLedMode");
            } else {
              int led_state = parse_number<int>(getLedMode).value();
              // ESP_LOGD("custom", "The value of getLedMode is: %i", led_state);
              if (led_state == 0 || led_state == 1) {
                PUBLISH_SWITCH(mmwave_led, 1 - led_state);
              }
            }
          }
        }
        if (line.substr(0, 4) == "Done") {
          // ESP_LOGD("custom", "Found Done - line is: %s", line.c_str());
          // ESP_LOGD("custom", "Found Done - lastline is: %s", getline.c_str());
          // leapMMW:/>sensorStop
          if (getline.substr(0, 20) == "leapMMW:/>sensorStop") {
            // ESP_LOGD("custom", "sensorStop completed successfully");
            PUBLISH_SWITCH(mmwave_sensor, 0);
          }

          // leapMMW:/>sensorStart
          if (getline.substr(0, 21) == "leapMMW:/>sensorStart") {
            // ESP_LOGD("custom", "sensorStart completed successfully");
            PUBLISH_SWITCH(mmwave_sensor, 1);
          }
        }
        getline = buffer; 
      }
    }
  }
};

          std::string mss = "setSensitivity " + to_string(id(mmwave_sensitivity_global));
          return std::vector<unsigned char>(mss.begin(), mss.end());
      - delay: 1s
      - switch.turn_on: mmwave_sensor
      - delay: 6s # the sum of mmwave_sensor delays
      
